80bits for SMPTE time code (not strictly true, because at 30 frames per second, 80 bits per frame), if we want 1000 packets per board per second, then how many bits (of an SMPTE time code) will we have captured?
80bits*30frames/second=2400bits/second
2400 bits/second (equivalent to 4800Hz, round to 5000Hz) in 1ms gives 5 samples which is less than 1 byte. So with a little oversampling, such that we have 8 samples at 1ms, we need a sample rate of 8000Hz. How will we re-assemble this data? Perhaps we should stick to two-times over-sampling (instead of 3.33)? Perhaps a circular buffer isn't the way to go, unless we also send the pointer-head. 
Either way, let's reserve 1Byte (8bits) for the time code. Otherwise we can just use the word clock to trigger a counter at audio rate (44100Hz)?  I guess we want the time code data to sync up with the audio! 
 
8bits SMPTE time code 
8bits required for ID
4*16-bit for sensors data (or 8*8-bit numbers)
32bits for counter value
8bits for status?
_______________________
total=15 bytes of data
use 10 bytes for parity to allow for 5 symbol errors (i.e. 5 bytes, or 10 symbol errasures, if we know where the byte is missing)
giving 25 bytes in total (we're not sending the padding for the shortened code)

with 25bytes*8bits*6board=1200bits (need 1.2MHz for 1000kHz board rate)

Thus, for a shortened MM=2^8 code, NN=255, KK=255-10=245, where 10 is the #parity bits
Shorten the KK to an actual sent data bytes of 15, plus 10 parity, gives 25.
Thus the number of padding bytes is: 230
